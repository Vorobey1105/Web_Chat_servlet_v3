CREATE TABLE roles (role_id NUMBER, title VARCHAR2(25 CHAR) NOT NULL UNIQUE, description VARCHAR2(100 CHAR) NOT NULL UNIQUE, CONSTRAINT roles_pk PRIMARY KEY(role_id));
CREATE SEQUENCE roles_seq START WITH 1 INCREMENT BY 1 NOMAXVALUE;
CREATE TABLE users (nick VARCHAR2(25 CHAR) NOT NULL, role NUMBER REFERENCES roles (role_id), fullName VARCHAR2(125 CHAR) NOT NULL, telephoneNumber VARCHAR2(125 CHAR) NOT NULL, email VARCHAR2(50 CHAR) NOT NULL, CONSTRAINT nick_pk PRIMARY KEY(nick));
CREATE TABLE statuses (id_status NUMBER, title VARCHAR2(25 CHAR)NOT NULL, description VARCHAR2(25 CHAR)NOT NULL, CONSTRAINT statuses_pk PRIMARY KEY(id_status));
CREATE SEQUENCE statuses_seq START WITH 1 INCREMENT BY 1 NOMAXVALUE;
CREATE TABLE passwords (user_nick VARCHAR2(25 CHAR)NOT NULL REFERENCES users (nick), password VARCHAR2(125 CHAR) NOT NULL, CONSTRAINT userPass_pk PRIMARY KEY (user_nick));
CREATE TABLE messages (id_message NUMBER, userFrom VARCHAR2(25 CHAR)NOT NULL REFERENCES users (nick), message VARCHAR2(300 CHAR)NOT NULL, TIMESTAMP timestamp NOT NULL, status number REFERENCES statuses (id_status), CONSTRAINT messages_pk PRIMARY KEY(id_message));
CREATE SEQUENCE messages_seq START WITH 1 INCREMENT BY 1 NOMAXVALUE;
CREATE OR REPLACE TRIGGER id_message_trigger BEFORE INSERT ON messages FOR EACH ROW BEGIN IF :NEW.id_message IS NULL THEN SELECT messages_seq.NEXTVAL INTO :NEW.id_message FROM dual; END IF; :NEW.TIMESTAMP :=SYSTIMESTAMP; END;
/
CREATE OR REPLACE TRIGGER id_status_trigger BEFORE INSERT ON statuses FOR EACH ROW WHEN (NEW.id_status IS NULL) BEGIN SELECT statuses_seq.NEXTVAL INTO :NEW.id_status FROM dual; END;
/